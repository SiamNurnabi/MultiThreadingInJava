// prevent thread execution

We can prevent thread execution by using following methods:
1. yield() method
2. join() method
3. sleep() method

1. yield() method: public static native void yield()

-- We can prevent thread execution by using the yield() method. The yield() method is a static method of the Thread class.
It is used to pause the currently executing thread temporarily and give a chance to the remaining waiting threads of the same priority to execute.
If there is no waiting thread or all the waiting threads have a lower priority then the same thread will continue its execution.


-- what if there is higher priority thread is waiting rather than same priority while using yield method?
In this case, the same thread will continue its execution. The waiting thread will not get the chance to execute.
The waiting thread will get the chance only if all the waiting threads have the same priority or lower priority.

-- If multiple threads are waiting with the same priority then the thread which thread will get the chance?
The thread which will get the chance is decided by the thread scheduler.
The thread scheduler is part of the JVM, and it is responsible to decide which thread will get the chance to execute.

-- The thread which is yielded, when it will get the chance to execute again?
The thread which is yielded will get the chance to execute again when the thread scheduler will give the chance to it.

Native method:
The yield() method is a native method. It is implemented in the native language like C or C++.
The yield() method is implemented in the native language because it is related to the thread scheduler which is part of the JVM.





2. join() method:

public final void join() throws InterruptedException
public final void join(long millis)
public final void join(long millis, int nanos)
-- We can prevent thread execution by using the join() method. The join() method is a non-static method of the Thread class.
It is used to pause the currently executing thread until the thread on which it is called is dead.
If the thread on which join() method is called is dead then the currently executing thread will continue its execution.

-- If the thread on which join() method is called is not dead then the currently executing thread will wait until the thread is dead.
The currently executing thread will not continue its execution until the thread is dead.

-- If the thread on which join() method is called is dead then the currently executing thread will continue its execution.
The currently executing thread will not wait.

// join method
The join() method in Java is used to pause the execution of the current thread until the thread on which join() was called has finished executing.
 This is useful when you want one thread to wait for another to complete before proceeding.

If a wants to wait until completing some other thread then we should go for join method. For example:
If a thread t1 wants to wait until completing t2, then t1 has to call t2.join.
If t1 executes t2.join(), then t1 will be enter into waiting state until t2 complete. Once t2 completes, t1 can continue its execution.






      Venue Fixing          Wedding Cards           Wedding Cards
      Activity              Printing                Distribution
      (t1)                  (t2)                    (t3)
       .                     .                       .
       .                     .                       .
       .                     .                       .
                            t1.join()               t2.join()

Here t2 will wait until t1 completes. t3 will wait until t2 completes.


public final void join() // It will wait until the thread on which join() method is called is dead.
public final void join(long millis)  // It will wait for the specified time in milliseconds.
public final void join(long millis, int nanos) // It will wait for the specified time in milliseconds and nanoseconds.

why millis is long and nanos is int?


why join method is final?
The join() method is a final method. It is declared as final in the Thread class. It is declared as final because it is a native method.
The join() method is a native method. It is implemented in the native language like C or C++.

****fEvery join method throws InterruptedException which is a checked exception. So we have to handle it using try-catch block or throws keyword.
If we don't handle it, the program will not compile. It will throw a compile-time error.




































